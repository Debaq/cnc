// ============================================
// G-CODE GENERATOR
// ============================================
class GCodeGenerator {
    constructor() {
        this.gcode = '';
    }

    generate(paths, config, operationType) {
        const lines = [];

        // Header
        lines.push('(Generated by GRBL Web Control Pro v3.0)');
        lines.push(`(Date: ${new Date().toISOString()})`);
        lines.push(`(Operation: ${operationType})`);
        lines.push('');
        lines.push('G21 ; Set units to millimeters');
        lines.push('G90 ; Absolute positioning');
        lines.push('G17 ; XY plane selection');
        lines.push('');

        if (operationType === 'cnc') {
            lines.push(`M3 S${config.spindleRPM} ; Start spindle`);
            lines.push('G4 P2 ; Wait 2 seconds');
        } else if (operationType === 'laser') {
            lines.push('M3 S0 ; Laser mode, off');
        }

        lines.push('G0 Z5 ; Safe height');
        lines.push('G0 X0 Y0 ; Move to origin');
        lines.push('');

        // TODO: Add actual path commands here
        // For now just placeholder
        lines.push('(Path commands will be generated here)');

        // Footer
        lines.push('');
        lines.push('G0 Z10 ; Raise Z');
        lines.push('M5 ; Stop spindle/laser');
        lines.push('G0 X0 Y0 ; Return to origin');
        lines.push('M2 ; End program');

        this.gcode = lines.join('\n');
        return this.gcode;
    }

    calculateEstimates(gcode, config) {
        const lines = gcode.split('\n').filter(l => l.trim() && !l.startsWith('('));

        // Simple estimation
        const totalLines = lines.length;
        const estimatedTime = totalLines * 0.1; // 0.1 seconds per line average
        const estimatedDistance = 0; // TODO: Calculate from actual moves

        return {
            distance: estimatedDistance,
            time: estimatedTime
        };
    }
}
